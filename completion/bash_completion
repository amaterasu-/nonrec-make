# bash completion overrides for nonrec-make          -*- shell-script -*-
#
# The approach is to override the original make completion and insert extra
# features in front of it

# start by sourcing the original make completion - wherever it may be
for original in /usr/share/bash-completion/completions/make /etc/bash_completion.d/make ; do
  if [ -f "$original" ]; then
    . "$original"
    break
  fi
done

_nonrec_make_find_arguments()
{
  for cur; do
    case "$cur" in
      BUILD_MODE=*)
        echo -n "$cur "
        ;;
    esac
  done
}

_nonrec_all_modes()
{
  local build_dirs=$(make -C ${top} completion_list_build_dirs | sed -n 's/^COMPLETION_BUILD_DIRS_LIST=//p')
  for dir in $build_dirs; do
    for i in $(\ls $dir/build-*.mk 2> /dev/null); do
      i=${i#$dir/build-}
      i=${i%%.mk}
      echo $i
    done
  done
}

_nonrec_make()
{
    local cur prev words cword split
    _init_completion -s || return

    local orig_lc_all="$LC_ALL"
    LC_ALL=C # needed to convince case statement to match err,.. case

    # Pull any interesting parameters from the command-line
    # to feed to subsidiary makes
    local args=$(_nonrec_make_find_arguments "${words[@]}")
    local build_mode=$(env ${args} sh -c 'echo ${BUILD_MODE}')

    # Derive $(TOP) and $(MK)
    local top mk
    top=$(pwd)
    while [ ! -f "$top/Rules.top" ]; do
      local next=$(dirname "$top")
      if [ "$next" = "$top" ]; then
        # We've hit the root - give up
        break
      fi
      top="$next"
    done

    if [ -f "$top/Rules.top" ]; then
      mk="$top/mk"
    else
      top=
    fi

    # Only intercept make if there's a Rules.mk
    if [ -n "$top" ]; then

      case "$cur" in
        VERBOSE=*)
          # options that are true or can be excluded - ie should be true
          COMPREPLY=( $( compgen -W "true" -- "${cur#*=}" ) )
          ;;

        COLOR_TTY=*)
          # options that have no default truth value
          COMPREPLY=( $( compgen -W "true false" -- "${cur#*=}" ) )
          ;;

        BUILD_MODE=*)
          local modes=($(_nonrec_all_modes))
          COMPREPLY=( $( compgen -W '${modes[@]}' -- "${cur#*=}" ) )
          ;;

        SSH_TARGET_*=*)
          # must have something here to avoid completion loop below
          # lets complete ssh hostnames
          _known_hosts_real -a "${cur#*=}"
          ;;

        SSH_TARGET_*)
          if [ -n "$build_mode" ]; then
            COMPREPLY=( $( compgen -W "SSH_TARGET_${build_mode}=" -- "${cur#*=}" ) )
          else
            local modes=($(_nonrec_all_modes))
            modes=( "${modes[@]/#/SSH_TARGET_}" ) # prefix SSH_TARGET_
            modes=( "${modes[@]/%/=}" ) # suffix with =
            COMPREPLY=( $( compgen -W '${modes[@]}' -- "${cur#*=}" ) )
          fi
          compopt -o nospace
          ;;

        [A-Z]*)
          COMPREPLY=( $( compgen -W "BUILD_MODE= VERBOSE= COLOR_TTY= SSH_TARGET_" -- "$cur" ) )
          compopt -o nospace
          ;;

        /*)
          # filter on current directory
          local filter=$(pwd)
          # unless current completion is outside this path
          [ "${filter#${cur}}" == "${filter}" ] && filter="${cur}"
          local completions=$(make -C ${top} completion_list_targets ${args} COMPLETION_FILTER="${filter}" | sed -n 's/^COMPLETION_TARGET_LIST=//p')
          COMPREPLY=( $( compgen -W "${completions}" -- "$cur" ) )
          ;;

        *)
          ;;
      esac

    fi

    LC_ALL="$orig_lc_all"

    if [ -z "$COMPREPLY" ]; then
      # Defer to normal make completion
      _make "$@"
    fi
} &&
complete -F _nonrec_make make

# ex: ts=4 sw=4 et filetype=sh
